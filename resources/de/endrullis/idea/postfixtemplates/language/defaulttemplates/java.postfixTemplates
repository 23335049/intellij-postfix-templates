## number conversions ##

.toBoolean : convert to boolean
	java.lang.String         →  Boolean.parseBoolean($expr$)

.toByte : convert to byte
	java.lang.String         →  Byte.parseByte($expr$)
	java.lang.Number         →  $expr$.byteValue()
	NUMBER                   →  ((byte) ($expr$))

.toShort : convert to short
	java.lang.String         →  Short.parseShort($expr$)
	java.lang.Number         →  $expr$.shortValue()
	NUMBER                   →  ((short) ($expr$))

.toChar : convert to char
	java.lang.String         →  $expr$.charAt(0)
	NUMBER                   →  ((char) ($expr$))

.toInt : convert to int
	java.lang.String         →  Integer.parseInt($expr$)
	java.lang.Number         →  $expr$.intValue()
	NUMBER                   →  ((int) ($expr$))

.toLong : convert to long
	java.lang.String         →  Long.parseLong($expr$)
	java.lang.Number         →  $expr$.longValue()
	NUMBER                   →  ((long) ($expr$))

.toFloat : convert to float
	java.lang.String         →  Float.parseFloat($expr$)
	java.lang.Number         →  $expr$.floatValue()
	NUMBER                   →  ((float) ($expr$))

.toDouble : convert to double
	java.lang.String         →  Double.parseDouble($expr$)
	java.lang.Number         →  $expr$.doubleValue()
	NUMBER                   →  ((double) ($expr$))

#.format : format number
#	BYTE                     →  String.format("$format::"%d"$", $expr$)
#	SHORT                    →  String.format("$format::"%d"$", $expr$)
#	CHAR                     →  String.format("$format::"%c"$", $expr$)
#	INT                      →  String.format("$format::"%d"$", $expr$)
#	LONG                     →  String.format("$format::"%d"$", $expr$)
#	FLOAT                    →  String.format("$format::"%f"$", $expr$)
#	DOUBLE                   →  String.format("$format::"%f"$", $expr$)



## collection conversions ##

.toList : convert to List
	ARRAY                    →  Arrays.asList($expr$)
	java.util.Collection     →  new ArrayList<>($expr$)
	java.lang.Iterable       →  StreamSupport.stream($expr$.spliterator(), false).collect(Collectors.toList())

.toSet : convert to Set
	ARRAY                    →  Stream.of($expr$).collect(Collectors.toSet())
	java.util.Collection     →  new HashSet<>($expr$)
	java.lang.Iterable       →  StreamSupport.stream($expr$.spliterator(), false).collect(Collectors.toSet())

.toMap : convert to Map
	ARRAY                    →  Arrays.stream($expr$).collect(Collectors.toMap($keyF$, $valueF$))
	java.util.Collection     →  $expr$.stream().collect(Collectors.toMap($keyF$, $valueF$))
	java.lang.Iterable       →  StreamSupport.stream($expr$.spliterator(), false).collect(Collectors.toMap($keyF$, $valueF$))
	java.util.stream.Stream  →  $expr$.collect(Collectors.toMap($keyF$, $valueF$))

#.stream : convert to Stream
#	java.lang.Iterable       →  StreamSupport.stream($expr$.spliterator(), false)



## collection operations ##

.sort : sort naturally
	ARRAY                    →  Arrays.sort($expr$)
	java.util.List           →  Collections.sort($expr$)

.sortBy : sort by attribute
	ARRAY                    →  Arrays.sort($expr$, Comparator.comparing($attributeF$))
	java.util.List           →  $expr$.sort(Comparator.comparing($attributeF$))
	java.util.stream.Stream  →  $expr$.sorted(Comparator.comparing($attributeF$))

.minBy : minimum by attribute
	ARRAY                    →  Arrays.stream($expr$).min(Comparator.comparing($attributeF$))
	java.util.Collection     →  $expr$.stream().min(Comparator.comparing($attributeF$))
	java.lang.Iterable       →  StreamSupport.stream($expr$.spliterator(), false).min(Comparator.comparing($attributeF$))
	java.util.stream.Stream  →  $expr$.min(Comparator.comparing($attributeF$))

.maxBy : maximum by attribute
	ARRAY                    →  Arrays.stream($expr$).max(Comparator.comparing($attributeF$))
	java.util.Collection     →  $expr$.stream().max(Comparator.comparing($attributeF$))
	java.lang.Iterable       →  StreamSupport.stream($expr$.spliterator(), false).max(Comparator.comparing($attributeF$))
	java.util.stream.Stream  →  $expr$.max(Comparator.comparing($attributeF$))

.groupBy : group by attribute
	ARRAY                    →  Arrays.stream($expr$).collect(Collectors.groupingBy($attributeF$))
	java.util.Collection     →  $expr$.stream().collect(Collectors.groupingBy($attributeF$))
	java.lang.Iterable       →  StreamSupport.stream($expr$.spliterator(), false).collect(Collectors.groupingBy($attributeF$))
	java.util.stream.Stream  →  $expr$.collect(Collectors.groupingBy($attributeF$))

.exists : any match
	ARRAY                    →  Arrays.stream($expr$).anyMatch($conditionF$)
	java.util.Collection     →  $expr$.stream().anyMatch($conditionF$)
	java.lang.Iterable       →  StreamSupport.stream($expr$.spliterator(), false).anyMatch($conditionF$)
	java.util.stream.Stream  →  $expr$.anyMatch($conditionF$)

.forall : all match
	ARRAY                    →  Arrays.stream($expr$).allMatch($conditionF$)
	java.util.Collection     →  $expr$.stream().allMatch($conditionF$)
	java.lang.Iterable       →  StreamSupport.stream($expr$.spliterator(), false).allMatch($conditionF$)
	java.util.stream.Stream  →  $expr$.allMatch($conditionF$)

.reverse : reverse collection
	ARRAY                    →  ArrayUtils.reverse($expr$)
	java.util.List           →  Collections.reverse($expr$)

.concat : concat
	ARRAY                    →  Stream.concat(Arrays.stream($expr$), $stream$)
	java.util.Collection     →  Stream.concat($expr$.stream(), $stream$)
	java.util.stream.Stream  →  Stream.concat($expr$, $stream$)

.forEach : for each
	ARRAY                    →  Arrays.stream($expr$).forEach($endActionF$)
	java.util.Optional       →  $expr$.ifPresent($endActionF$)

.mkString : make a string
	ARRAY                    →  Arrays.stream($expr$).collect(Collectors.joining($separator$))
	java.util.Collection     →  $expr$.stream().collect(Collectors.joining($separator$))
	java.lang.Iterable       →  StreamSupport.stream($expr$.spliterator(), false).collect(Collectors.joining($separator$))
	java.util.stream.Stream  →  $expr$.collect(Collectors.joining($separator$))

.map : map entries
	java.util.List           →  $expr$.stream().map($f$).collect(Collectors.toList())
	java.util.Set            →  $expr$.stream().map($f$).collect(Collectors.toSet())
	java.util.Map            →  $expr$.entrySet().stream().collect(Collectors.toMap($keyF$, $valueF$))

.mapKeys : map keys
	java.util.Map            →  $expr$.entrySet().stream().collect(Collectors.toMap($keyF$, e -> e.getValue()))

.mapValues : map values
	java.util.Map            →  $expr$.entrySet().stream().collect(Collectors.toMap(e -> e.getKey(), $valueF$))

.getOrElseUpdate : get or else update
	java.util.Map            →  $expr$.computeIfAbsent($key$, $valueF$)

.filter : filter map entries
	java.util.List           →  $expr$.stream().filter($conditionF$).collect(Collectors.toList())
	java.util.Set            →  $expr$.stream().filter($conditionF$).collect(Collectors.toSet())
	java.util.Map            →  $expr$.entrySet().stream().filter($conditionF$).collect(Collectors.toMap(e -> e.getKey(), e -> e.getValue()))
	java.lang.Iterable       →  StreamSupport.stream($expr$.spliterator(), false).collect(Collectors.toList())

.reduce : reduce
	ARRAY                    →  Arrays.stream($expr$).reduce($accumulatorF$)
	java.util.Collection     →  $expr$.stream().reduce($accumulatorF$)
	java.lang.Iterable       →  StreamSupport.stream($expr$.spliterator(), false).reduce($accumulatorF$)

.fold : fold
	ARRAY                    →  Arrays.stream($expr$).reduce($neutralElement$, $accumulatorF$)
	java.util.Collection     →  $expr$.stream().reduce($neutralElement$, $accumulatorF$)
	java.lang.Iterable       →  StreamSupport.stream($expr$.spliterator(), false).reduce($neutralElement$, $accumulatorF$)
	java.util.stream.Stream  →  $expr$.reduce($neutralElement$, $accumulatorF$)

.find : find element
	ARRAY                    →  Arrays.stream($expr$).filter($conditionF$).findFirst()
	java.util.Collection     →  $expr$.stream().filter($conditionF$).findFirst()
	java.lang.Iterable       →  StreamSupport.stream($expr$.spliterator(), false).filter($conditionF$).findFirst()
	java.util.stream.Stream  →  $expr$.filter($conditionF$).findFirst()

.take : take a certain number of elements
	java.util.stream.Stream  →  $expr$.limit($intValue$)

.drop : drop a certain number of elements
	java.util.stream.Stream  →  $expr$.skip($intValue$)

.size : size of collection
	ARRAY                    →  $expr$.length

.get : get element
	ARRAY                    →  $expr$[$i$]



## function applications ##

.apply : apply the function
	java.lang.Runnable                    →  $expr$.run()
	java.util.function.Supplier           →  $expr$.get()
	java.util.function.BooleanSupplier    →  $expr$.getAsBoolean()
	java.util.function.DoubleSupplier     →  $expr$.getAsDouble()
	java.util.function.IntSupplier        →  $expr$.getAsInt()
	java.util.function.LongSupplier       →  $expr$.getAsLong()
	java.util.function.Consumer           →  $expr$.accept($object$)
	java.util.function.BiConsumer         →  $expr$.accept($object$, $object$)
	java.util.function.DoubleConsumer     →  $expr$.accept($doubleValue$)
	java.util.function.IntConsumer        →  $expr$.accept($intValue$)
	java.util.function.LongConsumer       →  $expr$.accept($longValue$)
	java.util.function.ObjDoubleConsumer  →  $expr$.accept($object$, $doubleValue$)
	java.util.function.ObjIntConsumer     →  $expr$.accept($object$, $intValue$)
	java.util.function.ObjLongConsumer    →  $expr$.accept($object$, $longValue$)
	java.util.function.Predicate          →  $expr$.test($object$)
	java.util.function.BiPredicate        →  $expr$.test($object$, $object$)
	java.util.function.DoublePredicate    →  $expr$.test($doubleValue$)
	java.util.function.IntPredicate       →  $expr$.test($intValue$)
	java.util.function.LongPredicate      →  $expr$.test($longValue$)



## others ##

.new : new instance
	CLASS                    →  new $expr$($END$)

.lines : lines
	java.io.File             →  Files.readAllLines($expr$.toPath(), Charset.forName($encoding::"\"UTF-8\""$))
	java.nio.file.Path       →  Files.readAllLines($expr$, Charset.forName($encoding::"\"UTF-8\""$))
	java.lang.String         →  $expr$.split("\\r?\\n")
	java.io.InputStream      →  new BufferedReader(new InputStreamReader($expr$)).lines()

.content : content
	java.io.File             →  new String(Files.readAllBytes($expr$.toPath()), $encoding::"\"UTF-8\""$)
	java.nio.file.Path       →  new String(Files.readAllBytes($expr$), $encoding::"\"UTF-8\""$)
	java.io.InputStream      →  new Scanner($expr$, $encoding::"\"UTF-8\""$).useDelimiter("\\A").next()
	java.net.URL             →  new Scanner($expr$.openStream(), $encoding::"\"UTF-8\""$).useDelimiter("\\A").next()

.bufferedReader : wrap with BufferedReader
	java.io.InputStream      →  new BufferedReader(new InputStreamReader($expr$))

.r : compile pattern
	java.lang.String         →  Pattern.compile($expr$)

.val : extract as value
	NON_VOID [lombok.val]    →  val $var:suggestVariableName()$ = $expr$;
	NON_VOID                 →  final $type*:expressionType(expr))$ $var:suggestVariableName()$ = $expr$;


## IDEA development templates ##

.toVirtualFile : as virtual file
	java.io.File [com.intellij.openapi.vfs.VirtualFile]  →  LocalFileSystem.getInstance().findFileByIoFile($expr$)

.toFile : as file
	com.intellij.openapi.vfs.VirtualFile  →  new File($expr$.getPath())

.getAttributes : get file attribute
	com.intellij.openapi.vfs.VirtualFile  →  LocalFileSystem.getInstance().getAttributes($expr$)

.openInEditor : open file in editor
	com.intellij.openapi.vfs.VirtualFile  →  new OpenFileDescriptor($project:variableOfType("com.intellij.openapi.project.Project")$, $expr$).navigate(true)

.getVirtualFile : get virtual file
	com.intellij.openapi.editor.Document  →  FileDocumentManager.getInstance().getFile($expr$)

.getDocument : get document
	com.intellij.psi.PsiFile              →  PsiDocumentManager.getInstance($project:variableOfType("com.intellij.openapi.project.Project"):concat(expr, ".getProject()")$).getDocument($expr$)
	com.intellij.psi.PsiElement           →  PsiDocumentManager.getInstance($project:variableOfType("com.intellij.openapi.project.Project"):concat(expr, ".getProject()")$).getDocument($expr$.getContainingFile())
	com.intellij.openapi.fileEditor.FileEditor  →  PsiDocumentManager.getInstance($project:variableOfType("com.intellij.openapi.project.Project")$).getDocument(PsiManager.getInstance($project*$).findFile($expr$.getFile()))

.getPsiFile : get PSI file
	com.intellij.openapi.vfs.VirtualFile  →  PsiManager.getInstance($project:variableOfType("com.intellij.openapi.project.Project")$).findFile($expr$)
	com.intellij.openapi.editor.Document  →  PsiDocumentManager.getInstance($project:variableOfType("com.intellij.openapi.project.Project")$).getPsiFile($expr$)
	com.intellij.openapi.fileEditor.FileEditor  →  PsiManager.getInstance($project:variableOfType("com.intellij.openapi.project.Project")$).findFile($expr$.getFile())

.getPsiJavaFile : get PSI Java file
	com.intellij.psi.PsiClass             →  ((PsiJavaFile) $expr$.getContaningFile())

.getPsiPackage : get PSI package
	com.intellij.psi.PsiClass             →  JavaPsiFacade.getInstance($project:variableOfType("com.intellij.openapi.project.Project")$).findPackage(((PsiJavaFile) $expr$.getContaningFile()).getPackageName())
	com.intellij.psi.PsiJavaFile          →  JavaPsiFacade.getInstance($project:variableOfType("com.intellij.openapi.project.Project")$).findPackage($expr$.getPackageName())

.getChildrenOfType : get children of certain type
	com.intellij.psi.PsiElement           →  PsiTreeUtil.getChildrenOfType($expr$, $class$)

.getModule : get module
	com.intellij.openapi.vfs.VirtualFile  →  ProjectRootManager.getInstance($project:variableOfType("com.intellij.openapi.project.Project"):concat(expr, ".getProject()")$).getFileIndex().getModuleForFile($expr$)

.getProject : get project
	com.intellij.openapi.actionSystem.DataContext  →  DataKeys.PROJECT.getData($expr$)

.runReadAction : runWriteAction(...)
	ANY [com.intellij.openapi.application.Application]  →  ApplicationManager.getApplication().runReadAction(() -> {\
	                                                         $expr$$END$\
	                                                       });

.runWriteAction : runWriteAction(...)
	ANY [com.intellij.openapi.application.Application]  →  ApplicationManager.getApplication().runWriteAction(() -> {\
	                                                         $expr$$END$\
                                                         });

.invokeLater : invokeLater(...)
	ANY [com.intellij.openapi.application.Application]  →  ApplicationManager.getApplication().invokeLater(() -> {\
	                                                         $expr$$END$\
                                                         });

.showDiff : show diff
	java.lang.String [com.intellij.diff.DiffManager]  →  DiffManager.getInstance().showDiff($project:variableOfType("com.intellij.openapi.project.Project")$, new SimpleDiffRequest("$title::"Diff Title"$",\
	                                                       DiffContentFactory.getInstance().create($expr$),\
	                                                       DiffContentFactory.getInstance().create($content2::"content2"$),\
                                                         "$leftTitle::"Left side"$", "$rightTitle::"Right side"$", "$title::"Diff Title"$");
