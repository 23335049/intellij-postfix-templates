<idea-plugin>
	<id>de.endrullis.idea.postfixtemplates</id>
	<name>Custom Postfix Templates</name>
	<version>1.4.0</version>
	<vendor email="stefan@endrullis.de" url="https://github.com/xylo/intellij-postfix-templates">Stefan Endrullis</vendor>
	<category>code editing</category>

	<description><![CDATA[
			<a href="https://github.com/xylo/intellij-postfix-templates#download">Documentation</a> |
			<a href="https://github.com/xylo/intellij-postfix-templates#custom-postfix-templates-for-intellij-idea">Screencast</a> |
			<a href="https://github.com/xylo/intellij-postfix-templates#preconfigured-java-templates-for-scala-users-and-those-who-want-to-simplify-their-life">Predefined templates</a>
			<br/><br/>

			This plugin allows you to define your own postfix templates for Java, JavaScript, and Kotlin.
			It comes with a set of
			<a href="https://github.com/xylo/intellij-postfix-templates#preconfigured-java-templates-for-scala-users-and-those-who-want-to-simplify-their-life">predefined templates</a>
			which can be edited and extended, e.g.:

			<ul>
				<li>string.toInt    → Integer.parse(string)</li>
				<li>longValue.toInt → ((int) longValue)</li>
				<li>array.toList    → Arrays.asList(array)</li>
			</ul>
    ]]>
	</description>

	<change-notes><![CDATA[
			<h3>Version 1.4.0</h3>
			<ul>
				<li>Added the matching types to allow special treatments of literals:
				    <ul>
				      <li><code>NUMBER_LITERAL</code></li>
				      <li><code>BYTE_LITERAL</code></li>
				      <li><code>SHORT_LITERAL</code></li>
				      <li><code>CHAR_LITERAL</code></li>
				      <li><code>INT_LITERAL</code></li>
				      <li><code>LONG_LITERAL</code></li>
				      <li><code>FLOAT_LITERAL</code></li>
				      <li><code>DOUBLE_LITERAL</code></li>
				      <li><code>STRING_LITERAL</code></li>
			      </ul>
				</li>
			</ul>

			<h3>Version 1.3.0</h3>
			<ul>
				<li>Added option to add class/library dependencies to templates rules.
				    For instance <code>"".val</code> expands now to
				    <ul>
				      <li><code>val s = "";</code> if Lombok is available, or to</li>
				      <li><code>final String s = "";</code> if Lombok is not available.</li>
			      </ul>
				</li>
				<li>Added 16 templates for IDEA developers to the predefined templates.</li>
			</ul>

			<h3>Version 1.2.3</h3>
			<ul>
				<li>Fixed #43: Could not use $ in default values of template variables.</li>
			</ul>

			<h3>Version 1.2.2</h3>
			<ul>
				<li>Improved code completion and error highlighting for JavaScript and Kotlin templates.</li>
				<li>Added shortcut <i>Shift+Alt+P</i> to open the postfix templates of the current language.</li>
				<li>Fixed #42: JavaScript and Kotlin postfix templates did not detect complete dot expressions.</li>
			</ul>

			<h3>Version 1.2.1</h3>
			<ul>
				<li>Added basic support for Kotlin (untyped templates only).</li>
			</ul>

			<h3>Version 1.2.0</h3>
			<ul>
				<li>Added JavaScript support.</li>
			</ul>

			<h3>Version 1.1.1</h3>
			<ul>
				<li>Changed plugin icon.</li>
			</ul>

			<h3>Version 1.1.0</h3>
			<ul>
				<li>Added matching type <code>CLASS</code> to detect class references.</li>
				<li>Added postfix template <code>.new</code> which can be applied to class references.</li>
			</ul>

			<h3>Version 1.0.2</h3>
			<ul>
				<li>Fixed that templates could not be applied to partial expressions or method parameters.</li>
				<li>Fixed that each template started with a dot in the completion dialog.</li>
				<li>Fixed bug #33: Read access is allowed from event dispatch thread or inside read-action only.</li>
			</ul>
    ]]>
	</change-notes>

	<!-- please see http://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/build_number_ranges.html for description -->
	<idea-version since-build="162.0"/>

	<!-- please see http://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/plugin_compatibility.html
			 on how to target different products -->
	<depends>com.intellij.modules.lang</depends>
	<depends>com.intellij.modules.java</depends>
	<depends optional="true">org.intellij.scala</depends>
	<depends optional="true">org.jetbrains.kotlin</depends>

	<application-components>
		<component>
			<interface-class>de.endrullis.idea.postfixtemplates.ApplicationInterface</interface-class>
			<implementation-class>de.endrullis.idea.postfixtemplates.ApplicationImpl</implementation-class>
		</component>
	</application-components>

	<extensions defaultExtensionNs="com.intellij">
		<codeInsight.template.postfixTemplateProvider language="JAVA"
		                                              implementationClass="de.endrullis.idea.postfixtemplates.languages.java.JavaPostfixTemplateProvider"/>
		<codeInsight.template.postfixTemplateProvider language="JavaScript"
		                                              implementationClass="de.endrullis.idea.postfixtemplates.languages.javascript.JavaScriptPostfixTemplateProvider"/>
		<!--
		<codeInsight.template.postfixTemplateProvider language="Scala"
		                                              implementationClass="de.endrullis.idea.postfixtemplates.templates.ScalaPostfixTemplateProvider"/>
		-->
		<codeInsight.template.postfixTemplateProvider language="kotlin"
		                                              implementationClass="de.endrullis.idea.postfixtemplates.languages.kotlin.KotlinPostfixTemplateProvider"/>

		<applicationConfigurable id="Settings.CustomPostfixTemplates"
		                         bundle="de.endrullis.idea.postfixtemplates.bundle.PostfixTemplatesBundle"
		                         groupId="editor"
		                         nonDefaultProject="true"
		                         key="settings.plugin.name"
		                         instance="de.endrullis.idea.postfixtemplates.settings.CptPluginConfigurable"/>
		<applicationService serviceImplementation="de.endrullis.idea.postfixtemplates.settings.CptApplicationSettings"/>

		<!-- Postfix templates file type and language -->
		<fileTypeFactory implementation="de.endrullis.idea.postfixtemplates.language.CptFileTypeFactory"/>
		<lang.parserDefinition language="CPT" implementationClass="de.endrullis.idea.postfixtemplates.language.CptParserDefinition"/>
		<lang.syntaxHighlighterFactory language="CPT" implementationClass="de.endrullis.idea.postfixtemplates.language.CptSyntaxHighlighterFactory"/>
		<colorSettingsPage implementation="de.endrullis.idea.postfixtemplates.language.CptColorSettingsPage"/>
		<annotator language="CPT" implementationClass="de.endrullis.idea.postfixtemplates.language.CptAnnotator"/>
		<completion.contributor language="CPT" implementationClass="de.endrullis.idea.postfixtemplates.language.CptCompletionContributor" order="first" id="compositieAttributeValues"/>
		<psi.referenceContributor implementation="de.endrullis.idea.postfixtemplates.language.CptReferenceContributor"/>
		<gotoSymbolContributor implementation="de.endrullis.idea.postfixtemplates.language.CptChooseByNameContributor"/>
		<lang.psiStructureViewFactory language="CPT" implementationClass="de.endrullis.idea.postfixtemplates.language.CptStructureViewFactory"/>
		<lang.formatter language="CPT" implementationClass="de.endrullis.idea.postfixtemplates.language.CptFormattingModelBuilder"/>
		<codeStyleSettingsProvider implementation="de.endrullis.idea.postfixtemplates.language.CptCodeStyleSettingsProvider"/>
		<langCodeStyleSettingsProvider implementation="de.endrullis.idea.postfixtemplates.language.CptLanguageCodeStyleSettingsProvider"/>
		<lang.commenter language="CPT" implementationClass="de.endrullis.idea.postfixtemplates.language.CptCommenter"/>
		<todoIndexer filetype="CPT file" implementationClass="de.endrullis.idea.postfixtemplates.language.CptTodoIndexer"/>
		<defaultLiveTemplatesProvider implementation="de.endrullis.idea.postfixtemplates.language.CptLiveTemplatesProvider"/>
		<liveTemplateContext implementation="de.endrullis.idea.postfixtemplates.language.CptContext"/>
		<liveTemplateMacro implementation="de.endrullis.idea.postfixtemplates.templates.macro.SuggestShortVariableNameMacro"/>
	</extensions>

	<actions>
		<!-- Add your actions here -->
		<group text="Custom _Postfix Templates" popup="true" id="Cpt.Menu" icon="/de/endrullis/idea/postfixtemplates/icons/cpt-icon.png"> <!-- class="de.endrullis.idea.postfixtemplates.actions.MenuAction">-->
			<add-to-group group-id="ToolsMenu" anchor="last"/>
		</group>

		<action text="Edit Templates of Current Language" id="Cpt.OpenTemplates" class="de.endrullis.idea.postfixtemplates.actions.OpenTemplatesAction">
			<add-to-group group-id="Cpt.Menu"/>
			<keyboard-shortcut first-keystroke="shift alt P" keymap="$default"/>
		</action>
		<action text="Edit _Java Templates" id="Cpt.OpenJavaTemplates" class="de.endrullis.idea.postfixtemplates.actions.OpenJavaTemplatesAction">
			<add-to-group group-id="Cpt.Menu"/>
		</action>
		<action text="Edit J_avaScript Templates" id="Cpt.OpenJavaScriptTemplates" class="de.endrullis.idea.postfixtemplates.actions.OpenJavaScriptTemplatesAction">
			<add-to-group group-id="Cpt.Menu"/>
		</action>
		<!--
		<action text="Edit _Scala Templates" id="Cpt.OpenScalaTemplates" class="de.endrullis.idea.postfixtemplates.actions.OpenScalaTemplatesAction">
			<add-to-group group-id="Cpt.Menu"/>
		</action>
		-->
		<action text="Edit _Kotlin Templates" id="Cpt.OpenKotlinTemplates" class="de.endrullis.idea.postfixtemplates.actions.OpenKotlinTemplatesAction">
			<add-to-group group-id="Cpt.Menu"/>
		</action>
	</actions>

</idea-plugin>
